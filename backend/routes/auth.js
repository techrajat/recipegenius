const express = require('express');
const router = express.Router();
const User = require('../models/User');
const fetchuser = require('../middleware/fetchuser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Note1: It is important to protect user's password and not store it directly in the database.
// For this purpose we will use salt, pepper and hash.
// Salt: It is a random string that is added to the password. It is randomly generated by bcryptjs.
// Pepper: It is a constant string declared in the backend which is added to password + salt. However,
// we are not going to use pepper in this project.
// Hash: It is a string generated by the hash function of password + salt + pepper. The hash value
// is then stored in the database in place of password.
// Whenever a user tries to login, bcrypt extracts the salt value from the stored hash. Then, it
// generates a hash of the given password + extracted salt + pepper. If both the hash values match,
// then it means the provided password is correct.

// Note2: We will use JsonWebToken (JWT) to generate a token which will be given to the user after
// successful login to the website. Then, the user will be able to access the resources of the backend
// such as the database using the JWT token.
// Every token contains a digital signature which verifies its authencity.
const JWT_SECRET = "signedByRK"; // JWT digital signature

// Endpoint for registering a new user :-
router.post('/register', async (req, res)=>{
    try{
        let user = await User.findOne({phone: req.body.phone, email: req.body.email})
        if(user){
            return res.status(400).json({error: "** User already registered"});
        }

        let phoneExists = await User.findOne({phone: req.body.phone});
        if(phoneExists){
            return res.status(400).json({ error: "** Phone number already registered" });
        }

        let emailExists = await User.findOne({email: req.body.email});
        if(emailExists){
            return res.status(400).json({ error: "** Email id already registered" });
        }

        let salt = await bcrypt.genSalt(10); // Generate a salt
        // Generate hash with password and salt :-
        let securedPass = await bcrypt.hash(req.body.password, salt);
        // Create a new user :-
        user = await User.create({
            firstName: req.body.firstName,
            lastName: req.body.lastName,
            phone: req.body.phone,
            email: req.body.email,
            password: securedPass
        });

        res.status(200).json({success: "User created successfully"});
    }
    catch{        
        return res.status(500).json({ error: "** Internal server error" });
    }
});

// Endpoint for user login and generating the authentication token :-
router.post('/login', async (req, res)=>{
    try{
        let user = await User.findOne({email: req.body.email}); // Check whether the email is correct
        if(!user){
            return res.status(400).json({error: "** Wrong login credentials"});
        }
        
        // bcrypt.compare() will verify whether the password provided by the user and the hashed
        // password stored in the database are same or not.
        let passComp = await bcrypt.compare(req.body.password, user.password);

        if(!passComp){
            return res.status(400).json({error: "** Wrong login credentials"});
        }

        // 'data' will contain the information that we will send along the token to the user.
        // It is an object.
        let data = {
            user:{ // We are passing an object 'user' along the token.
                id: user.id // It will contain 'id' of the registered user which is automatically 
                // generated by mongodb. This id can be used to fetch all other information of the user
                // using mongodb queries.
            }
        };
        let authToken = jwt.sign(data, JWT_SECRET); // Generating the token with data and signature.
        res.status(200).json({ authToken });
    }
    catch{
        return res.status(500).json({ error: "** Internal server error" });
    }
});

// Endpoint for getting the user details after successful login :-
router.post('/getuser', fetchuser, async (req, res)=>{
    try{
        let userID = req.user.id; // Get id from req.user given by the middleware
        // Send all the user details except the password :-
        const userDetails = await User.findById(userID).select('-password');
        res.status(200).json({ userDetails });
    }
    catch{
        return res.status(500).json({ error: "** Internal server error" });
    }
});

module.exports = router;